# -*- coding: utf-8 -*-
"""Untitled78.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/gopal2812/EPAIAssignment11/blob/main/session11.ipynb

##Description
The starting point for this project is the Polygon class and the Polygons sequence type we created in the previous
project or mentioned in deepNote

###Goal
Refactor the Polygons (sequence) type, into an iterable. You'll need to implement both an iterable, and an iterator.

### Polygon Class
1. A regular strictly convex polygon is a polygon that has the following characteristics:
    * All interior angles are less than 180
    * All sides have equal length

2. For a regular strictly convex polygon with vertices n and circumradius r:
    * interiorAngle = (n−2) * (180/n)
    * edgeLength, s = 2 * R * sin(π/n) 
    * apothem, a = R * cos(π/n)
    * area = (1/2) * n * a
    * perimeter = n * s
3. Create a Polygon Class:
     
     1. Where initializer takes in:
        * number of edges/vertices
        * circumradius
      2. That can provide these properties:
          * edges
          * vertices
          * interior angle
          * edge length
          * apothem
          * area
          * perimeter
      3. That has these functionalities:
          * a proper __repr__ function
          * implements equality (==) based on # vertices and circumradius (__eq__)
          * implements > based on number of vertices only (__gt__)
"""

import math


class Polygon:
    """
    Polygon class to create polygons which are regular strictly convex.
    Regular strict polygons have two properties:
    1- All interior angles are less than 180.
    2- All sides have equal length
    """
    def __init__(self, count_edges: int, circumradius: float) -> None:
        """ Initialize the edges, circumradius, interiorAngle, edgeLength ,
            apothem, area, perimeter. """
        if count_edges < 3:
            raise ValueError('Polygon must have at least 3 edges.')
        self._n = count_edges
        self._R = circumradius
        self._interior_angle = None
        self._apothem = None
        self._side_length = None
        self._area = None
        self._perimeter = None

    def __repr__(self):
        """ This function gives the details of the Polygon Sequence object"""
        return f'Polygon(n={self._n}, R={self._R})'

    @property
    def count_vertices(self):
        """Number of vertices in the polygon"""
        return self._n

    @property
    def count_edges(self):
        """Number of edges in the polygon"""
        return self._n

    @count_edges.setter
    def count_edges(self, value):
        """Function to set the number of edges"""
        if value < 3:
            raise ValueError("edges should be greater than 3")
        self._n = value
        self._interior_angle = None
        self._apothem = None
        self._side_length = None
        self._area = None
        self._perimeter = None

    @property
    def circumradius(self):
        """circumradius of the polygon"""
        return self._R

    @circumradius.setter
    def circumradius(self, value):
        """ Setter for circumradius"""
        if value < 0:
            raise ValueError(" circumadius should be greater than 0")
        self._R = value
        self._interior_angle = None
        self._apothem = None
        self._side_length = None
        self._area = None
        self._perimeter = None

    @property
    def interior_angle(self):
        """Interior angle of the polygon"""
        if self._interior_angle is None:
            self._interior_angle = (self._n - 2) * 180 / self._n
        return self._interior_angle

    @property
    def side_length(self):
        """side length of the polygon"""
        if self._side_length is None:
            self._side_length = 2 * self._R * math.sin(math.pi / self._n)
        return self._side_length

    @property
    def apothem(self):
        """apothem of the polygon"""
        if self._apothem is None:
            self._apothem = self._R * math.cos(math.pi / self._n)
        return self._apothem

    @property
    def area(self):
        """area of the polygon"""
        if self._area is None:
            self._area = self._n / 2 * self.side_length * self.apothem
        return self._area

    @property
    def perimeter(self):
        """perimeter of the polygon"""
        if self._perimeter is None:
            self._perimeter = self._n * self.side_length
        return self._perimeter

    def __eq__(self, other):
        """Provides ability to compare two objects for euality (==)."""
        if isinstance(other, self.__class__):
            return (self._n == other._n
                    and self._R == other._R)
        else:
            return NotImplemented

    def __gt__(self, other):
        """Provide ability to compare two objects for greater than '>' test."""
        if isinstance(other, self.__class__):
            return self.count_vertices > other.count_vertices
        else:
            return NotImplemented
